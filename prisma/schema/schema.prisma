// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Feedback {
  id      String  @id @default(nanoid(11))
  review  Int
  message String
  email   String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  roles          CustomRole[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([name, organizationId])
  @@index([organizationId])
}

model CustomRole {
  id             String   @id @default(cuid())
  name           String
  description    String?
  permissions    String // Stocke les permissions au format JSON
  color          String? // Couleur du rôle (format hex)
  position       Int // Position hiérarchique (comme Discord)
  organizationId String
  members        Member[] // Relation avec les membres qui utilisent ce rôle

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  @@unique([name, organizationId])
  @@index([departmentId])
  @@map("custom_role")
}

// Active Officers Model for tracking active/on-duty law enforcement
model ActiveOfficer {
  id             String       @id @default(cuid())
  officerNumber  String // Badge or officer number (e.g., "34", "SAPR-12")
  officerName    String // Name display (e.g., "34 - D Alexander Main")
  department     String // Department (e.g., "SAPR", "LSPD")
  status         String // Current status (e.g., "On-Duty", "Meal break")
  callsign       String? // Radio callsign if any
  radioChannel   String? // Which radio channel they're on
  incident       String? // Current incident ID if responding
  notes          String? // Additional notes
  isTemporary    Boolean      @default(false) // If it's a temporary unit
  createdById    String? // Who created this entry
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([department])
  @@index([status])
}

model Citizen {
  id                   String   @id @default(cuid())
  image                String?
  citizenId            String   @unique // ID unique du citoyen dans le jeu (ex: HPP63796)
  license              String?  // License du joueur
  name                 String   // Nom d'affichage
  money                Json     // { cash: number, bank: number, crypto: number }
  charinfo             Json     // Informations du personnage
  job                  Json?    // Informations sur le métier
  gang                 Json?    // Informations sur le gang
  position             Json?    // Position actuelle { x: number, y: number, z: number }
  metadata             Json     // Métadonnées du joueur
  inventory            Json?    // Inventaire du joueur
  lastUpdated          DateTime @default(now()) @updatedAt
  lastSyncedAt         DateTime? // Dernière synchronisation avec l'API

  // Champs extraits de charinfo pour faciliter la recherche
  firstName            String
  lastName             String
  dateOfBirth          DateTime
  phone                String?
  gender               String
  nationality          String?

  // Champs extraits de metadata pour faciliter la recherche
  fingerprint          String?
  bloodType            String?
  isDead               Boolean  @default(false)
  isHandcuffed         Boolean  @default(false)
  inJail               Int      @default(0)

  // Relations
  organizationId       String
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vehicles             Vehicle[]
  medicalRecords       MedicalRecord[]
  fines                Fine[]
  judicialCases        JudicialCase[]
  warrants             Warrant[]

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([organizationId])
  @@index([citizenId])
  @@index([firstName, lastName])
  @@index([phone])
}

model MedicalRecord {
  id             String       @id @default(cuid())
  citizenId      String
  citizen        Citizen      @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Type de dossier médical
  type String // CARE, INJURY, TRAUMA, PSYCHOLOGY, DEATH

  // Informations générales
  title       String
  description String
  location    String? // Lieu des soins/incident

  // Détails médicaux
  diagnosis    String?
  treatment    String?
  prescription String?

  // Détails spécifiques selon le type
  injuryDetails   String? // Détails des blessures
  traumaDetails   String? // Détails des traumatismes
  psychologyNotes String? // Notes psychologiques
  deathCause      String? // Cause du décès
  autopsyReport   String? // Rapport d'autopsie

  // Restrictions et confidentialité
  isConfidential   Boolean @default(false) // Données sensibles
  isPoliceVisible  Boolean @default(false) // Visibilité police
  restrictedAccess Boolean @default(false) // Accès restreint

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([citizenId])
  @@index([organizationId])
}

model Vehicle {
  id                   String   @id @default(cuid())
  citizenId            String
  citizen              Citizen  @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  organizationId       String
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Identifiants uniques
  plate                String   @unique // Plaque d'immatriculation
  vin                  String?  // Numéro d'identification du véhicule
  hash                 String?  // Hash du véhicule
  vehicle              String?  // Nom du véhicule (ex: "g63")

  // Informations de base
  model                String   // Modèle du véhicule
  brand                String?  // Marque du véhicule
  type                 String?  // Type de véhicule (car, bike, etc.)
  class                String?  // Classe du véhicule

  // État et caractéristiques
  fuel                 Float?   // Niveau de carburant
  engineHealth         Float?   // État du moteur
  bodyHealth           Float?   // État de la carrosserie
  mileage              Float?   // Kilométrage
  color                Json?    // Couleurs { primary: string, secondary: string, pearlescent: string }
  
  // État et statut
  state                String   @default("out") // out, in, impound
  garage               String?  // Garage actuel
  garageState          String?  // État dans le garage
  stored               Boolean  @default(true) // Si le véhicule est stocké
  wheelclamp           Boolean  @default(false) // Si le véhicule est immobilisé

  // Modifications et personnalisation
  mods                 Json?    // Modifications du véhicule
  extras               Json?    // Extras activés/désactivés
  damage               Json?    // Dégâts du véhicule
  customName           String?  // Nom personnalisé du véhicule
  isFavorite           Boolean  @default(false) // Véhicule favori

  // Informations de financement
  depotPrice           Float?   // Prix de dépôt
  drivingDistance      Float?   // Distance parcourue
  balance              Float?   // Solde restant
  paymentAmount        Float?   // Montant des paiements
  paymentsLeft         Int?     // Nombre de paiements restants
  financeTime          DateTime? // Date de financement

  // Informations de mise en fourrière
  impoundedTime        DateTime? // Date de mise en fourrière
  impoundReason        String?  // Raison de la mise en fourrière
  impoundedBy          String?  // Qui a mis en fourrière
  impoundType          String?  // Type de mise en fourrière
  impoundFee           Float?   // Frais de fourrière
  impoundTime          DateTime? // Durée de la mise en fourrière

  // Informations supplémentaires
  lastPosition         Json?    // Dernière position connue
  glovebox             Json?    // Contenu de la boîte à gants
  trunk                Json?    // Contenu du coffre
  job                  String?  // Métier associé au véhicule
  storedInGang         String?  // Gang qui stocke le véhicule
  sharedGarageId       String?  // ID du garage partagé

  // Métadonnées
  lastUpdated          DateTime @default(now()) @updatedAt
  lastSyncedAt         DateTime? // Dernière synchronisation avec l'API

  // Relations
  fines                Fine[]   // Amendes liées à ce véhicule

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([citizenId])
  @@index([organizationId])
  @@index([plate])
  @@index([state])
  @@index([garage])
  @@index([type])
}

// Modèle pour les infractions prédéfinies du code pénal
model PenalCode {
  id            String  @id @default(cuid())
  code          String // Code de l'infraction (ex: A-101)
  category      String // Catégorie (Trafic, Crime, Délit, etc.)
  description   String // Description de l'infraction
  minFine       Float // Montant minimum de l'amende
  maxFine       Float // Montant maximum de l'amende
  licensePoints Int? // Points retirés du permis (facultatif)
  jailTime      Int? // Temps de prison en minutes (facultatif)
  notes         String? // Notes supplémentaires

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  fines Fine[] // Amendes associées à cette infraction

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([code])
  @@index([category])
}

// Modèle pour les amendes appliquées
model Fine {
  id          String     @id @default(cuid())
  citizenId   String
  citizen     Citizen    @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  penalCodeId String?
  penalCode   PenalCode? @relation(fields: [penalCodeId], references: [id], onDelete: SetNull)

  // Véhicule impliqué dans l'infraction (pour les infractions de trafic)
  vehicleId String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: SetNull)

  // Détails de l'amende
  amount        Float // Montant de l'amende
  reason        String // Raison/description
  location      String? // Lieu de l'infraction
  licensePoints Int? // Points retirés du permis
  jailTime      Int? // Temps de prison en minutes

  // Statut
  status String    @default("PENDING") // PENDING, PAID, CONTESTED
  paidAt DateTime? // Date de paiement

  // Qui a émis l'amende
  issuedById   String?
  issuedByName String // Nom de l'agent qui a émis l'amende
  issuedByDept String // Département (LSPD, Sheriff, FBI)

  notes String? // Notes supplémentaires

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([citizenId])
  @@index([organizationId])
  @@index([status])
  @@index([issuedByDept])
  @@index([vehicleId])
}

model JudicialCase {
  id         String  @id @default(cuid())
  caseNumber String // Numéro de dossier
  citizenId  String
  citizen    Citizen @relation(fields: [citizenId], references: [id], onDelete: Cascade)

  // Informations générales
  title       String
  description String
  category    String // CRIMINAL, CIVIL, TRAFFIC, ADMINISTRATIVE
  status      String // OPEN, CLOSED, PENDING, VERDICT

  // Détails judiciaires
  charges         String? // Charges/accusations (peut être un JSON avec liste des infractions)
  verdict         String? // Décision du tribunal
  sentenceDetails String? // Détails de la peine
  judgeName       String? // Nom du juge

  // Dates importantes
  filingDate  DateTime  @default(now()) // Date de dépôt
  hearingDate DateTime? // Date d'audience
  closedDate  DateTime? // Date de clôture

  // Documents et restrictions
  documents   String? // Liste des documents liés (format JSON)
  isSealed    Boolean @default(false) // Dossier scellé
  isSensitive Boolean @default(false) // Dossier sensible

  // Métadonnées
  createdById   String? // ID de l'utilisateur qui a créé le dossier
  createdByName String // Nom de la personne qui a créé le dossier
  createdByDept String // Département/service

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  warrants Warrant[] // Mandats liés à ce dossier

  @@index([citizenId])
  @@index([organizationId])
  @@index([status])
  @@index([createdByDept])
}

model Warrant {
  id            String @id @default(cuid())
  warrantNumber String // Numéro du mandat

  // Associations
  judicialCaseId String?
  judicialCase   JudicialCase? @relation(fields: [judicialCaseId], references: [id], onDelete: SetNull)
  citizenId      String
  citizen        Citizen       @relation(fields: [citizenId], references: [id], onDelete: Cascade)

  // Détails du mandat
  type        String // ARREST, SEARCH, SURVEILLANCE
  status      String // PENDING, APPROVED, EXECUTED, EXPIRED, CANCELED
  description String // Description/motifs
  location    String? // Lieu d'exécution prévu

  // Approbation et exécution
  issuedById     String? // ID de l'agent qui a émis le mandat
  issuedByName   String // Nom de l'agent qui a émis le mandat
  issuedByDept   String // Département (LSPD, Sheriff, FBI)
  approvedById   String? // ID du juge/procureur qui a approuvé
  approvedByName String? // Nom du juge/procureur qui a approuvé
  executedById   String? // ID de l'agent qui a exécuté le mandat
  executedByName String? // Nom de l'agent qui a exécuté le mandat

  // Dates
  issuedDate     DateTime  @default(now()) // Date d'émission
  approvedDate   DateTime? // Date d'approbation
  expirationDate DateTime? // Date d'expiration
  executedDate   DateTime? // Date d'exécution

  // Restrictions
  isUrgent Boolean @default(false) // Urgence (exécution immédiate)
  isSealed Boolean @default(false) // Mandat scellé/confidentiel

  // Métadonnées et notes
  notes          String? // Notes supplémentaires
  executionNotes String? // Notes d'exécution

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([citizenId])
  @@index([organizationId])
  @@index([judicialCaseId])
}

model InviteLink {
  id            String    @id @default(cuid())
  code          String    @unique
  role          String // member, admin, etc.
  maxUses       Int? // null means unlimited
  uses          Int       @default(0)
  expiresAt     DateTime? // null means never expires
  isActive      Boolean   @default(true)
  createdById   String? // Who created this invite link
  createdByName String? // Name of the creator

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([code])
  @@index([isActive])
}

model Form {
  id             String    @id @default(cuid())
  title          String
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  questions      Question[]
  responses      FormResponse[]
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  webhookUrl     String? // Ajout du webhook Discord
  webhookMentions String? // IDs de rôles et users à mentionner (JSON)
}

model Question {
  id        String   @id @default(cuid())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId    String
  label     String
  type      String   // "text", "textarea", "select", "checkbox", "radio", etc.
  options   String?  // JSON string for select/radio/checkbox options
  required  Boolean  @default(false)
  order     Int
  answers   Answer[]
}

model FormResponse {
  id        String   @id @default(cuid())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId    String
  userId    String?  // Optionnel si anonyme
  createdAt DateTime @default(now())
  answers   Answer[]
}

model Answer {
  id             String   @id @default(cuid())
  formResponse   FormResponse @relation(fields: [formResponseId], references: [id], onDelete: Cascade)
  formResponseId String
  question       Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String
  value          String    // JSON string (pour gérer tous les types de réponses)
}